Select * from table where age = 20
=> SQL문을 이렇게 작성하면 테이블 내의 행이 1억개라면 age가 20인것을 찾기 위해 1억번 찾는다.
=> 데이터가 많을수록 느려진다. 이를 개선하기 위해 Index를 사용한다.

임의의 숫자를 찾는 숫자게임을 한다. 숫자는 1000개가 존재한다.
1000개의 숫자를 일일이 물어보는 것은 비효율적이다.
100보다 큰가? 200보다 작은가? ... 이런식의 질문으로 빠르게 찾을 수 있다.
이를 위해서는 정렬이 필요하다. 1,2,3,4...

위의 SQL문에서 age칼럼을 빠르게 찾고 싶다면 복사하여 정렬를 시켜놓는다. 이를 index라고 한다.
데이터를 정렬하고 싶다면 Array, LinkedList.. 등을 사용한다.
DB는 TREE 형태로 데이터를 나열하고 정렬시킨다.
DB에서 INDEX를 만들면 똑같이 TREE 구조로 만들어서 정렬한다. 이를 Binary Search Tree라고 부른다.

이 Binary Search Tree의 성능개선을 위해서 각 노드에 두 개씩 데이터를 넣는다. 그러면 찾을 떄 더 빠르게 소거하여 찾을 수 있다. 이를 B-Tree라고 한다.

위의 B-Tree릐 성능개선을 위해서 데이터는 맨 마지막에만 보관하고 위의 노드에는 데이터 탐색 가이드만 배치한다.
맨 아래의 데이터들도 화살표로 연결되어 있다. 그렇다면 범위검색이 더욱 쉬워진다.
이를 B+Tree라고 한다. 

SQL 명령문으로 데이터를 찾을 떄 INDEX가 존재하면 INDEX를 먼저 찾는다. 
위의 논리로 데이터를 찾는다.
index에는 기존의 행 데이터의 주소가 존재한다. 그 행 데이터를 반환한다.


INDEX의 단점
1. INDEX는 칼럼을 복사하여 저장하기 떄문에 DB용량을 많이 차지한다.
2. 기존의 데이터를 수정, 삭제하면 INDEX도 같은 작업이 들어가야 한다.























