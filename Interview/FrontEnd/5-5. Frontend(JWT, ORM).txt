1. JWT(JSON WEB TOKEN)란?
=> 사용자 인증 및 정보 교환을 위해 사용하는 토큰 기반 인증 방식입니다.
=> JWT는 JSON 형식으로 인코딩된 토큰이며, 웹 애플리케이션의 인증/인가에 사용됩니다.

1-1. JWT 특징
1. 토큰 기반 인증입니다. => 로그인하면 JWT를 발급하고 이후 요청에서 토큰을 사용하여 인증합니다.
2. 무상태입니다. => 세션을 서버에 저장하지 않고 클라이언트에서 보관합니다.
3. 자체 정보가 포함됩니다. => JWT 내부에 사용자 정보가 포함되어 있어서 서버 조회가 필요없습니다.
4. 다양한 환경에 사용이 가능합니다. => RestAPI, GraphQL, 모바일 앱에서 사용이 가능합니다.


1-2. JWT 구조
=> JWT는 dot으로 구분된 3개의 파트로 구성됩니다.

1. Header
=> JWT 타입과 해싱 알고리즘 정보를 포함합니다.
=> {"alg": 'HS256', 'typ' : 'JWT'}

2. Payload
=> 사용자의 정보(클레임)를 포함한 JSON 데이터입니다.
=> 민감한 정보를 포함하면 안됩니다. JWT는 쉽게 디코딩이 가능합니다.
=> { "userId": 101, "role": "admin", "exp": 1693158200}

3. Signature(서명)
=> Header + Payload를 합쳐서 비밀키로 서명한 값입니다.

** header와 payload는 Base64 인코딩한 값입니다. ***

** 서명을 생성하는 방법 **
=> header와 payload를 base64로 인코딩 후에 합칩니다.
=> 이를 비밀키와 함께 해시 함수로 서명합니다.


1-3. 동작 방식
1. 로그인 요청 
2. 인증 후 서버에서 JWT를 발급
3. JWT를 브라우저에 저장합니다. (session or localstorage, cookie)
4. 이 후 요청 시 JWT를 포함하여 요청합니다.
5. 서버에서 검증 후에 응답합니다.

6. 검증 방법
=> split을 통해 dot을 기준으로 나눕니다.
=> header와 payload를 base64로 디코딩하여 원본 JSON 객체로 되돌립니다.
=> header, payload를 비밀키와 해쉬 알고리즘을 통해 다시 서명을 생성합니다.
=> 재서명한 서명과 클라이언트 서명을 비교합니다.
=> 서명이 일치하면 JWT가 변조되지않은 것을 인식합니다.


1-4. Access Token과 Refresh Token

1. Access-Token
=> 사용자 인증을 확인하기 위한 토큰으로, 서버가 클라이언트에게 제공하는 짧은 시간 동안만 유효한 토큰입니다.
=> JWT == Access Token이라고 생각하면 됩니다.
=> 즉, 토큰의 유효 시간을 지정하는 것입니다.
=> 클라이언트가 요청 시 Access Token을 http 헤더에 포함시키거나 쿠키 **

2. Refresh Token
=> Access Token을 재발급받기 위해 긴 유효 시간을 가진 토큰입니다.
=> Access Token이 만료되었을 떄, 새로운 Access Token을 발급받을 수 있는 역할입니다.
=> 클라이언트가 로그인 => Access Token과 Refresh Token을 받고 Access Token이 만료되면 클라이언트는
refresh Token을 사용해서 새로운 Access Token을 요청할 수 있습니다.

=> Access Token과 Refresh Token은 같은 알고리즘으로 비밀키는 다르게 설정하는 것이 실용적이고 일반적입니다.



2. ORM이란? (Object Relational Mapping)
=> 객체(Object)와 데이터베이스(Relational Database)를 매핑하는 기술입니다.
=> SQL 없이 객체 지향 프로그래밍 방식으로 DB를 조작할 수 있는 도구입니다.

2-1. 사용 이유
1. SQL을 직접 사용한다면 SQL Injection 방어에 신경을 써야 합니다.
2. ORM을 사용하면 SQL을 자동으로 생성해주고 SQL Injection도 방지해 줍니다.  


2-2. 장단점
1. 장점
=> sql 없이 데이터 조작 가능, 코드 유지보수 용이, 보안 강화

2. 단점
=> 쿼리 최적화가 어렵습니다
=> 러닝 커브가 존재합니다.


2-3. ORM 사용 여부 판단
1. ORM을 사용해야 하는 경우
=> CRUD가 많을 떄
=> 코드 유지보수가 중요할 떄
=> SQL Injection 보안 리스크를 줄이고 싶을 떄

2. SQL을 직접 사용해야 하는 경우
=> 대규모 트래픽을 처리하는 고성능 시스템을 구축할 떄
=> 복잡한 Join이나 서브쿼리를 많이 사용할 떄
=> ORM으로 구현하기 어려울 떄