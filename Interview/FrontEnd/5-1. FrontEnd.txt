1. 주소창에 google.com을 입력하면 일어나는 일 - 주소창에 google.com을 입력하면 일어나는 일에 대해 말씀해주세요.
1-1. 사용자가 주소창에 google.com을 입력합니다.
1-2. DNS 조회: 먼저, 도메인 이름 google.com을 IP 주소로 변환하기 위해 DNS 서버에 요청을 보냅니다.
(도메인 이름을 실제 IP 주소로 변환하는 과정 => DNS 조회라고 합니다.)
1-3. TCP 연결: IP 주소를 확인한 후, 웹 브라우저는 해당 서버와 TCP 연결을 맺습니다.
(신뢰성있는 데이터 전송을 보장하기 위해 3-way-handshake 연결 설정합니다.)
1-4. HTTP 요청: 웹 브라우저는 HTTP 요청을 google.com 서버로 보냅니다.
1-5. 서버 응답: 서버는 요청된 HTML, CSS, JavaScript 파일을 클라이언트로 보냅니다.
1-6. 렌더링: 클라이언트는 받은 HTML을 바탕으로 DOM을 구성하고, CSS와 JavaScript를 사용해 페이지를 렌더링합니다.


2. ⭐ CSR과 SSR의 차이는 무엇인가요?
=> CSR은 브라우저에서 페이지 내용이 렌더링되는 것을 의미합니다.
=> 사용자 경험이 좋아지고 서버 부하가 줄어듭니다.
=> 초기 로딩이 길고, SEO에 문제를 겪을 수 있습니다.

=> SSR은 서버에서 페이지를 렌더링하고 브라우저에 완성된 HTML을 전달하는 방식입니다.
=> 초기 로딩이 빠르고 SEO에 적합합니다.
=> 서버 부하가 증가하거나 페이지 전환 시 성능에 영향이 있을 수 도 있습니다.


3. ⭐ CORS와 해결 경험을 말씀해주세요.
=> CORS는 다른 출처 간의 리소스 공유를 제어하는 보안 정책입니다.
=> 다른 출처란 도메인, 포트, 프로토콜을 의미합니다.

=> 이를 해결하기 위해서 서버에서 Access-Control-Allow-Origin 헤더를 추가해야 합니다.
=> 제가 해결하기 위해서 Node.js에서 cors 라이브러리를 사용하거나
=> res.setHeader('Access-Control-Allow-Origin'), res.setHeader('Access-Control-Allow-Methods')
=> res.setHeader('Access-Control-Allow-Headers')를 통해 front 출처를 허용했습니다.
=> 사전 요청을 받기 위해서 req.method === 'options'라면 status 200를 응답하여 허용했습니다.



4. ⭐ 로그인 처리를 할 때 쿠키와 세션을 어떻게 사용하시나요?
=> 세션은 서버 측에서 관리하는 로그인 상태를 나타냅니다.
=> 클라이언트는 서버에서 발급한 세션 ID를 쿠키로 저장하여 사용합니다.

=> 로그인 상태를 클라이언트에서 유지하는 데 사용됩니다.
=> 쿠키는 HTTP 요청에 자동으로 포함되며, 서버는 이를 통해 사용자의 상태를 확인합니다.


5. ⭐ 토큰 기반 인증 방식에 대해 설명해주세요.
=> 클라이언트가 서버로부터 JWT(JSON Web Token) 같은 토큰을 받아, 이후 요청 시 
이 토큰을 Authorization 헤더에 포함시켜 인증하는 방식입니다.
=> 서버는 토큰을 검증하여 사용자의 인증 상태를 확인하고, 필요한 리소스를 제공합니다.


6. ⭐ JWT 토큰을 쿠키에 저장했을 때 취약점에 대해 설명해주세요.
=> XSS (Cross-Site Scripting)
=> 클라이언트 측 스크립트를 통해 JWT를 탈취할 수 있습니다.

=> CSRF (Cross-Site Request Forgery)
=> 쿠키를 사용한 인증은 CSRF 공격에 취약할 수 있습니다.
=> SameSite 쿠키 옵션을 사용하거나, 다른 방식의 인증을 고려해야 합니다.
(사용자가 의도하지 않은 요청을 강제로 실행하게 만드는 웹 보안 취약점입니다.)
(인증 정보를 악용하여 악성 요청을 보냄 => 이를 서버가 정상 요청이라고 판단하고 처리)

*** JWT란? ***
=> 클라이언트와 서버 간의 안전한 정보 교환을 위해 사용되는 토큰 기반 인증 방식입니다.
=> JWT의 구성 요소는 헤더, 페이로드, 서명이 있습니다.


7. ⭐ 쿠키, 세션, 웹스토리지의 차이에 대해 설명해주세요.
=> 쿠키는 클라이언트 측에 데이터를 저장하는 방식으로, 서버와의 HTTP 요청 시 자동으로 전송됩니다.
=> 세션은 서버 측에서 관리되며, 클라이언트에 세션 ID를 저장하고 서버에서 세션 데이터를 관리합니다.
=> 웹 스토리지는 클라이언트에서 데이터를 저장하는 방법입니다. localStorage, sessionStorage가 있습니다.
=> 로컬은 영구, 세션은 일정 기간 동안 저장합니다.


8. ⭐ REST API에 대해 설명해주세요.
=> *REST (Representational State Transfer)**는 웹에서 클라이언트와 서버가 데이터를 주고받는 표준 방식입니다.
=> 자원, 자원의 식별(URL), 행위 세 가지 개념을 기반으로 합니다.
=> 즉, URL로 자원을 식별하고 HTTP 메서드로 데이터를 처리하는 방식이 Restful한 설계입니다.
(url 자원 식별, http 메서드로 데이터 처리)

(HTTP 프로토콜 => 웹에서 클라이언트와 서버 간의 데이터를 주고받는 통신 규약입니다.)
(HTTP의 특징으로 비연결, 무상태, 텍스트 기반 프로토콜, HTTP 메서드(get, post, put, delete)..)


9. ⭐ SEO(Search Engine Optimization)에 대해 설명해주세요.
=> SEO는 웹사이트가 검색 엔진 결과에서 상위에 노출되도록 최적화하는 작업입니다.
=> 메타 태그 최적화, 페이지 로딩 속도 최적화, SSR 적용, 시멘틱 태그 사용 등으로 
검색 엔진 최적화를 진행할 수 있습니다.







