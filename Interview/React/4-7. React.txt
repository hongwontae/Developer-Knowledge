1. React-Query에 대해 설명해주세요.
=> 서버 상태 관리 라이브러리로 서버에서 가져오는 데이터를 쉽게 다룰 수 있게 도와줍니다.
=> 기능으로 자동 데이터 fetching, 캐싱, 업데이트, background refetching...
=> 코드 양을 줄여주고, 관리 로직을 최소화하고 서버 상태와 클라이언트 상태를 분리할 수 있습니다.
=> 서버 응답을 자동으로 캐시하여 성능을 최적화 합니다.


2. Recoil에 대해 설명해주세요.
=> 상태 관리 라이브러리로 atom과 selector를 활용해 상태를 관리하고 성능을 최적화합니다.
=> atom은 상태 저장 단위입니다. selector는 파생 상태입니다. 이를 통해 비동기 통신을 할 수 있습니다.


5. Recoil에서 Loadable의 개념에 대해 설명해주세요.
=> Loadable 상태는 hasValue, loading, hasError와 같은 속성을 제공하여 
비동기 데이터를 로딩할 때의 다양한 상태를 처리할 수 있습니다.


6. Recoil에서 비동기로 데이터를 받아올 때 State를 어떻게 관리하셨나요?
=> Selector는 Promise를 반환할 수 있고 상태를 캐싱하여 비동기 작업이 반복되지 않도록 도와줍니다.


7. Recoil에서 로딩, 성공, 에러와 관련된 처리를 어떻게 하셨나요?
=> 로딩: Loadable의 loading 상태를 체크하여 로딩 중인 데이터를 처리합니다.
=> 성공: 데이터가 성공적으로 로딩되면 hasValue를 통해 데이터를 렌더링합니다.
=> 에러: 비동기 작업에서 오류가 발생하면 hasError를 통해 오류를 처리하고, UI에서 에러 메시지를 표시합니다.


8. ⭐ Redux와 Recoil에 대해 비교 설명해주세요. (개념, 장단점)
=> Redux는 대규모 어플리케이션에서 복잡한 상태관리와 예측 가능한 상태 흐름이 중요할 떄 사용하고
, recoil은 직관적이고 효율적인 비동기 상태를 관리할 때 사용합니다.