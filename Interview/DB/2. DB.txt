1. 인덱스란?
=> 테이블에서 데이터를 빠르게 검색할 수 있도록 도와주는 데이터 구조입니다.
=> 빠른 검색, 정렬(orderby), 중복 데이터 방지, 쿼리 성능 최적화 등 역할을 합니다.

단점
=> 인덱스는 일종의 데이터 사본이기 떄문에 공간을 더 많이 차지합니다.
=> 데이터 수정 시 성능 저하 => 인덱스도 함께 업데이트 


2. SQL과 NOSQL의 차이는?

2-1. SQL
=> 관계형 데이터베이스 RDBMS를 사용하는 시스템 언어입니다.
=> MySQL, Oracle, SQlite
=> 데이터는 테이블에 저장되고 테이블은 행과 열로 구성되어있고 테이블은 다른 테이블과 관계를 맺을 수 있습니다.
=> ACID 속성을 지원하여 트랜잭션의 신뢰성을 보장합니다.
=> 데이터 무결성, 트랜잭션 처리 등 장점이 있습니다.
=> 유연성 부족, 수평 확장(서버를 늘려서 확장)의 어려움의 단점이 있습니다.


2-2. NoSQL
=> 문서, 그래프, 키-값, 열 등 다양한 데이터 모델을 통해 데이터를 저장합니다.
=> 스키마가 동적입니다. 
=> NoSQL은 CAP이론을 따릅니다.
=> Consistency(일관성), Availability(가용성), Paritition Tolerance(분할 내구성) 중 두 가지를 따라야 합니다.
=> 수평 확장성에 용이합니다.

=> 확장성(수평 확장성), 유연성, 빠른 읽기/쓰기 성능의 장점이 있습니다.
=> 데이터 일관성 부족, 복잡한 쿼리의 어려움, 표준화 부족


3. 트랜잭션이란?
=> 데이터베이스에서 데이터를 처리하는 작업 단위를 의미합니다.
=> 트랜잭션이 정상적으로 처리되기 위해서는 ACID 속성을 충족해야 합니다.

******
=> A 원자성 : 모든 작업은 하나의 단위로 처리되어야 하고, 모두 성공 or 모두 실패해야 합니다.
=> C 일관성 : 트랜잭션 전이나 후에도 DB는 정상적이고 유효한 상태여야 합니다. (10만 송금, 돈의 총합은 같아야 한다.)
=> I 고립성 : 트랜잭션은 독립적으로 실행되어야 합니다. (동시에 같은 작업이 실행되도 간섭받지 않음)
=> D 지속성 : 트랜잭션이 완료되면 결과는 영구적으로 저장되어야 합니다. (작업 성공 이후 DB가 꺼져도 변경 상태 유지)
******

=> BEGIN TRANSACTION; 트랜잭션 시작
=> COMMIT; 트랜잭션 완료
=> ROLLBACK; 트랜잭션 취소

=> 온라인 뱅킹, 전자상거래, 주문 관리 시스템 같은 신뢰성이 중요한 시스템에서 필수적인 개념입니다.
