1. 프로토타입에 대해 설명해주세요.
=> JS는 프로토타입 기반 언어입니다.
=> 객체는 다른 객체를 상속할 수 있으며, 이 상속을 담당하는 것이 프로토타입입니다.
=> JS에서 모든 객체는 __proto__ 숨겨진 링크를 통해 다른 객체를 참조합니다. 
=> 참조된 객체를 프로토타입이라고 합니다.

=> 프로토타입 체인이란 객체에서 원하는 메서드나 속성을 찾지 못하면 프로토타입을 따라 상위 객체에서
계속 탐색하는 구조입니다. 최상위에는 Object.prototype이 있으며, 여기에도 없다면 undefined를 반환합니다.
=> 객체에 모든 속성이나 메서드를 저장하지 않고 프로토타입 체인 매커니즘을 통해 메모리를 절약할 수 있습니다.

=> .prototype은 생성자 함수나 클래스에서 사용되는 속성입니다. (생성자 함수, 클래스는 .prototype)
=> 이 생성자로 만든 객체들이 공통으로 사용할 메서드나 속성을 정의하는 곳입니다.

=> __proto__는 모든 객체가 가지고 있으며, 자기 자신의 프로토타입을 참조하는 속성입니다. (객체에는 __proto__)
=> 자신을 생성한 .prototype을 참조합니다. (.prototype은 객체입니다.)
=> 메서드 체인 매커니즘에 필요합니다.


2. 얕은 복사와 깊은 복사에 대해 설명해주세요.
2-1. 얕은 복사는 참조 타입을 복사할 떄 첫 번쨰 레벨의 값만 복사합니다.
=> 객체나 배열 안에 참조 타입이 존재하면 같은 객체를 참조하게 됩니다.

2-2. 깊은 복사는 중첩된 객체나 배열까지 재귀적으로 복사하여 새로운 메모리 공간에 할당합니다.
=> 완전히 독립적인 복사본이 생성됩니다.


3. 불변성을 유지하려면 어떻게 해야하나요?
3-1. immutable 라이브러리를 사용해서 깊은 불변성을 유지할 수 있습니다.
3-2. spread 연산자를 사용해서 새로운 배열이나 객체에 전개할 수 있습니다. (얕은 복사)
3-3. Object.freeze()를 사용해서 속성을 변경시킬 수 없게 만들 수 있습니다.


4. 비동기적으로 실행되는 것을 동기적으로 코딩하는 방법이 있나요?
4-1. Async/Await를 통해 Promise가 해결될 때까지 기다리며, 이를 통해 동기 코드처럼 작성할 수 있습니다.
4-2. 비동기 작업을 Promise로 처리해서 then, catch를 사용해서 연쇄적으로 작성할 수 있습니다.
