1. 이터러블
=> 반복할 수 있는 객체를 의미합니다.

1-1. 내부적으로 이터레이터를 제공합니다.
1-2. 배열, 문자열, 맵, 셋 같은 객체들을 의미
1-3. for-of, spread 연산자를 통해 반복될 수 있다.


2. 이터레이터
=> 이터러블 객체에서 값을 하나씩 꺼내는 도구를 의미합니다.

2-1. .next()를 가지고 있고 호출할 떄마다 이터러블의 다음 값을 반환합니다.
2-2. 반환되는 값의 형식은 {value : 값, done : true/false}입니다.
=> value는 현재 값/ done은 반복이 끝났는지 여부를 나타냄
2-3. for of 같은 메서드도 내부적으로 이터레이터 개념을 사용해서 값을 가져온다.

const arr = [1,2,3,4]
const iterator = arr[Symbol.iterator]();
const a1 = iterator.next(); {value : 1, done : false}
const a2 = iterator.next(); {value : 2, done : false}
const a3 = iterator.next(); {value : 3, done : false}
const a4 = iterator.next(); {value : 4, done : true}


면접 질문
이터러블과 이터레이터에 대해서 설명해보세요
=> 이터러블은 반복할 수 있는 객체를 의미합니다. 예를 들어, 배열(array), 문자열(string), 맵(Map) 객체, 셋(Set) 객체 
등이 있습니다. 이터러블 객체는 Symbol.iterator라는 키를 통해 이터레이터를 반환하는 메서드를 가지고 있습니다.

=> 이터레이터는 반복문이 동작할 때 내부적으로 사용되어 값을 가져오는 객체입니다. 이터레이터 객체는 next() 메서드를
 가지고 있으며, 이 메서드는 { value: ..., done: true or false } 형태의 객체를 반환합니다. done이 true가 될 때까지 
 반복하여 값을 반환합니다.