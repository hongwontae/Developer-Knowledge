1. 원시타입
=> 변수에 값 자체를 저장합니다.
=> 원시 데이터는 한 번 생성되면 그 값을 변경할 수 없습니다. 즉, 메모리 상에 기존 데이터를 수정하는게 아니라 
새로운 공간에 새로운 원시 타입을 저장하여 할당하는 것입니다.
=> 예를 들어, let a = 10;으로 초기화한 변수를 사용해서 let b에 할당해도 서로 독립적입니다.
=> 원시타입은 7개가 존재합니다. (String, Number, bigInt, Boolean, undefined, null, Symbol


2. 참조타입
=> 변수에 참조 주소값을 저장하는 데이터 타입입니다.
=> Object, Array, function..을 의미합니다.
=> 변수에 a라는 객체를 할당한 뒤 b라는 변수에 똑같이 객체를 할당하면 두 변수는 상호작용합니다. 즉, a 객체의 변경이
b 객체에 영향을 미칩니다.
=> 이를 피하기 위해서 얕은 복사나 깊은 복사를 통해 해결할 수 있습니다.


3. 원시 타입 데이터가 메서드나 일부 속성을 갖는 이유
=> 원시 타입 데이터에서 메서드나 일부 속성을 사용할 경우 일시적으로 래퍼 객체로 변환됩니다. 메서드 호출이 종료되면
JS가 자동으로 래퍼 객체를 정리하고 원래의 원시 타입 데이터로 돌아갑니다.
=> Number(), String, Boolean()를 통해 영구적으로 래퍼 객체를 만들 수 있습니다.


면접 질문-1
원시타입 데이터와 참조 타입 데이터에 대해서 설명하세요
=> 원시 타입은 변수에 값을 직접 저장하는 데이터 타입입니다. 메모리 상에 기존 데이터를 변경하는게 아니라 새로운
공간을 생성하고 값을 저장하여 변수에 할당합니다. 해당 타입은 String, Number, BigInt, null, undefined, Symbol, Boolean
이 존재합니다.
=> 참조 타입 데이터는 참조 주소 값을 변수에 저장하는 데이터 타입입니다. 즉, a라는 변수에 객체를 할당하고 a를 b에
할당하면 a의 변경이 b의 값에 영향을 미칩니다. object, arr, function가 이에 속합니다.


면접 질문-2
원시 타입 데이터는 객체가 아닌데 메서드를 사용할 수 있는 이유
=> 원시 타입 데이터가 메서드나 length 같은 속성을 사용하면 일시적으로 래퍼 객체가 되어 메서드나 속성을 사용할
수 있습니다. 메서드나 속성 사용 후에 다시 원시 타입 데이터로 돌아갑니다.
=> Number(), Boolean(), Stirng()를 통해 영구적으로 래퍼 객체로 만들 수 있습니다.