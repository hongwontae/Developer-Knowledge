1. ⭐ 동기와 비동기에 대해 설명해주세요.
=> 동기는 작업이 순차적으로 실행되는 방식입니다./ 작업이 끝나야 다음 작업으로 넘어갑니다.

=> 비동기는 작업이 동시에 처리되거나 끝날 떄까지 기다리지 않고 다른 작업을 실행하는 방식입니다. (병렬적 처리)
=> JS에서 Callback, Promise, Async/Await를 사용해서 비동기 작업을 처리합니다.


2. ⭐ 콜백 함수에 대해 설명해주세요.
=> 다른 함수의 인자로 전달되어 특정 시점에 실행되는 함수입니다.
=> 비동기 작업에 많이 사용됩니다.


3. ⭐ 콜백 지옥을 해결하는 방법을 설명해주세요.
=> 콜백 지옥이란 콜백 함수가 중첩되면서 코드 가독성이 떨어지는 현상입니다.
=> Promise나 Async/Await 문법을 사용합니다.


3. ⭐ Promise에 대해 설명해주세요.
=> Promise는 JS의 비동기 작업을 처리하기 위한 객체입니다.
=> 비동기 작업이 완료될 떄까지 기다리고, 결과를 처리할 수 있게 해줍니다.
=> Promise는 대기, 실패, 성공 3가지 상태를 가집니다.
=> new Promise((resolve, reject)=>{
    ...
    resolve()
    
    reject()
}) resolve나 reject가 호출되면 상태가 pending에서 성공 or 실패가 되면서 then과 catch를 사용할 수 있습니다.



4. Promise 메서드에 대해서 알려주세요
4-1. Promise.all(iterable)


5. ⭐ Promise와 Callback를 비교 설명해주세요.
=> Callback은 함수 인자에 들어가서 특정 시점에 호출되는 함수입니다.
=> 에러 핸들링 처리가 힘들거나 콜백 지옥을 만들 수 있습니다.

=> Promise는 비동기 작업을 처리하기 위한 객체입니다.
=> then, catch, finally을 사용해서 callback 지옥을 해결할 수 있습니다.


6. ⭐ Async, Await이 뭔지 그리고 사용 방법을 설명해주세요.
=> Promise를 더 간결하고 동기적으로 작성할 수 있게 해주는 문법입니다.
=> async는 함수 앞에 붙고 해당 함수가 Promise를 반환하게 하고 내부에서 await 키워드 사용을 허용하게 해줍니다.
=> await는 Promise가 이행될 때까지 기다리면서 결과를 반환합니다. (해당 컨텍스트 내에서 동기든 비동기든 기다리게
합니다.)


7. ⭐ Promise와 Async, Await의 차이를 설명해주세요.
=> 둘 다 Promise를 다룹니다.
=> Promise는 비동기 처리 결과를 기다리고 반환 값으로 promise 객체를 반환합니다.
=> 이를 통해 then, catch, finally 메서드 체이닝으로 값을 받거나 에러를 처리합니다.

=> Async/Await는 Promise 비동기 처리 결과를 기다리지만 코드 순서를 동기처럼 바꿔서 가독성이 좋습니다.


8. AJAX에 대해 설명해주세요.
=> 웹 페이지에서 서버와 비동기적으로 데이터를 주고받는 기술입니다.
=> 페이지를 새로 고침하지 않고, 서버와 통신할 수 있게 해줍니다.
=> XMLHttpRequest 객체를 사용하여 HTTP 요청을 보냄.
=> fetch() API가 주로 사용됩니다.