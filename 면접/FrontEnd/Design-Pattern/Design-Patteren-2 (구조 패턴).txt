1. 구조 패턴
=> 객체와 클래스를 조작하여 더 큰 구조를 만드는 패턴입니다.


2. 어댑터 패턴
=> 호환되지 않는 인터페이스를 가진 클래스들을 연결할 수 있게 해주는 패턴입니다.
=> 기존 코드 수정 x, 기존 시스템에 새로운 기능을 추가할 수 있습니다.

2-1. 어댑터 패턴의 구성요소
1. Target: 클라이언트가 사용하려는 인터페이스.
2. Adapter: Target 인터페이스를 원하는 형식으로 변환하는 클래스.
3. Adaptee: Target 인터페이스와 호환되지 않는 기존 시스템의 클래스.
4. Client: Target 인터페이스를 사용하는 클라이언트 코드.

(인터페이스 => 어댑터 패턴에서 객체가 가져야할 공통된 메서드 형태를 의미)

2-2. 장점
=> 기존 코드 수정 없이 새로운 기능을 추가합니다.
=> 인터페이스 호환성 문제를 해결합니다.
=> 클래스를 재사용할 수 있습니다.

2-3. 단점
=> 복잡성이 증가합니다.
=> 성능에 문제가 생길 수 도 있습니다. (매번 어댑터를 거쳐야 하기 떄문입니다.)


3. 프록시 패턴
=> 객체에 대한 접근을 제어하는 대리인 객체를 제공하는 패턴입니다.
=> 직접 접근이 아닌 프록시 객체를 통해 간접적으로 접근합니다.

3-1. 프록시 패턴이 필요한 이유
1. 보안(Security) → 객체에 대한 접근을 제한할 수 있음. (예: 관리자 권한 체크)
2. 지연 초기화(Lazy Initialization) → 무거운 객체의 생성을 지연할 수 있음. (예: 이미지 로드)
3. 캐싱(Caching) → 동일한 요청에 대한 결과를 저장해서 성능을 개선할 수 있음.
4. 로깅/추적(Logging/Tracing) → 객체의 메서드 호출을 감시할 수 있음.

3-2. 프록시 패턴은 객체의 직접 접근을 허용할 것인가, 프록시를 통해 간접적으로 관리할 것인가