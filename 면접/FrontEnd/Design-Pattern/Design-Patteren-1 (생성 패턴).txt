1. 디자인 패턴
=> 소프트웨어 개발에서 자주 사용되는 문제 해결 방식을 정리한 일종의 템플릿입니다.
=> 생성 패턴, 구조 패턴, 행동 패턴 3가지로 나눌 수 있습니다.

1-1. 생성패턴
=> 객체를 생성하는 과정에서 효율성을 높이고, 코드의 유연성을 증가시키는 패턴입니다.

1. 싱글톤 패턴
=> 인스턴스를 하나만 생성하여 공유하는 패턴입니다.
=> 설정 객체나 DB 연결 관리에 주로 사용됩니다.

2. 팩토리 패턴
=> 객체 생성 로직을 캡슐화하여 객체 생성을 단순화합니다.
=> 다형성이 필요한 경우 해당 패턴을 사용합니다.
(객체 생성 로직을 캡슐화하고 다형성이 필요한 경우 사용합니다.)

(
    My opinion
1. 여러 클래스나 하나의 클래스에 여러 생성자를 받는다.
2. 함수를 정의할 떄 인자를 받는데 이 인자는 다형성이라고 생각해도 좋다. 이에 따라 생성되는 객체가 다르다.
3. 그리고 함수 안에서 객체가 생성되기 때문에 캡슐화이다
)

3. 빌더 패턴
=> 복잡한 객체를 단계별로(점진적으로) 생성하는 패턴입니다.
=> 객체 생성이 복잡하거나 다양한 조합의 속성 값을 가질 떄 유용합니다.

3-1. 빌더 패턴의 구성요소
1. Product : 제품
2. Builder : 객체 생성에 필요한 단계를 정의하는 인터페이스 또는 클래스.
3. ConcreteBuilder : Builder 인터페이스를 구현한 클래스, 각 단계를 실제로 구현하고, Product를 반환합니다.
4. Director : Builder를 이용하여 객체를 생성하는 클래스, 어떤 단계를 순차적으로 실행할지 정의합니다.
=> 메서드 체이닝을 통해 원하는대로 구현


4. 팩토리 패턴 vs 빌더 패턴
=> 팩토리 패턴은 객체 생성 방법을 캡슐화하고 인자에 따라 다양한 객체를 만듭니다. => 인자
=> 빌더 패턴은 객체의 구성 요소를 점진적으로 구성하고 복잡한 객체를 만듭니다. => 메서드 체이닝




