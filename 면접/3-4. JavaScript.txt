1. 실행 컨텍스트에 대해 설명해주세요.
=> JS 코드가 실행될 떄 생성되는 환경입니다.

=> 컨텍스트의 종류는 3가지 입니다.
=> 전역 컨텍스트 : JS 코드가 실행될 떄 가장 먼저 생성됩니다. window, global에 바인딩, 
프로그램 종료될 때까지 유지됩니다.
=> 함수 컨텍스트 : 함수가 호출될 떄 생성되고 호출이 끝나면 사라집니다.
=> eval 컨텍스트 : eval() 호출되면 컨텍스트가 생성되지만 보안 떄문에 잘 사용하지 않습니다.

=> 실행 컨텍스트가 생성되면
1. 변수 환경 : var 변수, 함수 선언 저장
2. 렉시컬 환경 : let, const, 스코프 정보 저장
3. this 바인딩 : 현재 실행중인 컨텍스트의 this 값
** 이 떄 환경에는 변수 주소값이 저장되고 값은 메모리에 저장됩니다. **

=> 실행 컨텍스트는 콜 스택에 쌓였다가 실행이 끝나면 제거되며, 이를 통해 JS 함수 실행 순서를 관리합니다.


2. 렉시컬 환경(Lexical Environment)에 대해 설명해주세요.
=> let, const로 선언된 변수, 외부 환경 참조
=> 렉시컬 환경은 환경 레코드, 외부 렉시컬 환경 참조
** 현재 실행중인 함수의 변수 and 외부 스코프(상위 환경)에 대한 정보도 저장합니다. **
** 다르게 말하면 선언된 위치의 렉시컬 환경을 참조할 수 있습니다. **
** 이를 통해 스코프 체인이 가능합니다. **


3. ⭐ 호이스팅과 발생하는 이유에 대해 설명해주세요.
=> 호이스팅은 JS 엔진이 변수와 함수 선언을 실행 전에 메모리에 먼저 할당하는 현상입니다.
=> 호이스팅은 전역 실행 컨텍스트가 생성될 떄 변수와 함수 선언을 미리 등록하기 떄문에 발생합니다.

4. 스코프 (Scope)에 대해 설명해주세요.
=> 변수에 접근할 수 있는 범위를 의미합니다.
=> JS는 전역 스코프, 함수 스코프, 블록 스코프가 존재합니다.
=> var는 함수 스코프, let, const는 블록 스코프를 가집니다.
=> 스코프를 통해 유효 범위를 결정, 변수의 충돌을 방지할 수 있습니다.

** 전역 스코프, 함수 스코프, 블록 스코프**


5. 스코프 체인에 대해 설명해주세요.
=> 변수를 찾을 때 현재 스코프에서 찾고, 없으면 상위 스코프를 따라 올라가면서 탐색하는 기능입니다.
=> 풀어서 설명하면 실행 컨텍스트에는 렉시컬 환경이 존재하고 이 렉시컬 환경은 let, const 변수와 상위 스코프에
대한 참조가 있습니다. 이 떄 해당 환경 레코드에서 변수를 찾지 못하면 상위 스코프를 참조합니다. 
이를 스코프 체인이라고 합니다.


6. ⭐ 클로져(Closure)에 대해 설명해주세요.
=> 외부 함수와 내부 함수가 존재할 떄 외부 함수 호출이 끝나더라도 내부 함수는 외부 함수 렉시컬 환경을
기억할 수 있는 개념입니다.
=> 렉시컬 환경과 관련된 개념입니다.
