1. 이벤트 버블링과 캡처링에 대해 설명해주세요.
=> 버블링은 이벤트가 자식에서 부모 방향으로 전파되는 것을 의미합니다.
=> 캡쳐링은 이벤트가 부모에서 자식 방향으로 전파되는 것을 의미합니다.
=> addEventListener 3번 쨰 인자에 true를 설정하면 캡쳐링이 설정됩니다.


2. ⭐ 이벤트 위임에 대해서 설명해주세요.
=> 부모 요소에 이벤트를 등록하여 자식 요소의 이벤트를 관리하는 것을 의미합니다.
=> 자식 요소가 클릭되어 이벤트가 발생 => 버블링 발생 => 부모 요소에 이벤트 핸들러로 처리합니다.
=> 특히, 자식이 동적으로 생성되었을 떄 이벤트 위임을 사용하여 이벤트를 관리하는 것이 효율적입니다.
=> e는 자식 요소 event 객체


3. JS 이벤트 객체
=> 이벤트 핸들러에 전달되는 객체를 의미합니다.
=> 주요 속성과 메서드로 event.target, event.currentTarget, event.stopPropagation(), event.preventDefault()
=> event.stopPropagation()은 버블링과 캡쳐링을 막습니다.


4. event.target vs event.currentTarget
=> event.target은 실제 이벤트가 발생한 요소입니다.
=> event.currentTarget은 이벤트 핸들러가 등록된 요소입니다.


5. 자바스크립트를 멀티 쓰레드처럼 사용하는 방법이 뭔가요? 
/ 자바스크립트에서 비동기 로직이 어떻게 동작하는지 설명해주세요. (이벤트 루프)
=> 일반적인 JS는 단일 쓰레드지만 비동기 함수와 이벤트 루프를 통해 멀티 쓰레드처럼 사용할 수 있습니다.
=> 이벤트 루프는 콜 스택과 마이크로태스크 큐, 태스크 큐, 렌더링 큐를 관리합니다.
=> 각 큐에는 비동기 함수 호출의 콜백이 존재하고 콜 스택이 비워져 있다면 이벤트 루프가 가장 오래된 것부터
콜 스택으로 올립니다. (비동기 함수 로직은 web-API's에서 실행되고 콜백은 큐에 전달합니다.)


6. 태스크 큐와 마이크로 태스트 큐에는 어떤 함수가 들어가나요?
=> 태스크 큐는 setTimeout, setInterval 같은 비동기 함수의 콜백이 들어갑니다.
=> 마이크로 태스크 큐는 Promise의 then(callback)/  태스크 큐는 setTimeout(callback)/ 렌더링 큐는 request의
callback
=> 우선 순위는 마이크로태스크큐 > 태스크 큐 > 렌더링 큐


7. requestAnimationFrame 렌더링 큐에 대해 설명해주세요.
=> 브라우저의 다음 리페인트(화면 갱신) 전에 콜백 함수를 실행하는 함수입니다.

=> 렌더링 큐는 브라우저가 화면을 갱신할 타이밍에 실행할 작업을 모아두는 큐입니다.
=> 초당 60프레임(16.67ms 간격)으로 실행됩니다.


8. Blocking과 Non-Blocking에 대해 설명해주세요.
8-1. Blocking은 특정 작업이 완료될 떄까지 다음 작업이 실행되지 않는 것을 의미합니다.
8-2. Non-Blocking은 앞선 작업이 존재해도 작업을 기다리지 않고 다음 작업을 실행하는 것을 의미합니다.

