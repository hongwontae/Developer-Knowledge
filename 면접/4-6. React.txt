1. Redux에 대해 설명해주세요.
=> Redux는 상태를 중앙에서 관리하는 라이브러리입니다.
=> 상태는 액션을 통해 변경되고, 리듀서가 변화를 처리합니다.
=> 상태 변화는 스토어에서 관리하고 상태가 바뀔 떄마다 구독한 컴포넌트들이 리렌더링됩니다.


2. ⭐ Redux를 사용하는 이유에 대해 설명해주세요.
=> 예측 가능한 상태 관리, 디버깅에 용이(redux devtools), 쉬운 상태 전달, 미들웨어 지원(비동기 작업) 등 장점
을 얻을 수 있습니다.

3. ⭐ Redux의 장단점에 대해 설명해주세요.
=> 장점 : 상태 관리의 일관성, 디버깅과 유지보수 용이, 확장성
=> 단점 : 보일러플레이트 코드(코드가 장황), 학습 곡선, 간단한 상태 관리일 경우 오히려 복잡해 질 수 있습니다.


4. Flux 패턴에 대해 설명해주세요.
=> Facebook에서 제시한 애플리케이션의 상태 관리를 위한 아키텍처 패턴입니다.
=> 데이터 흐름을 단방향으로 유지하여 관리하기 쉽게 하는 구조입니다.
=> Flux의 주요 구성 요소는 액션(action), 디스패처(dispatcher), 스토어(store), **뷰(view)**입니다.
=> Redux가 Flux 패턴을 좀 더 간결하게 만든 구조입니다.


5. Context API와 Redux를 비교해주세요.
=> Context API는 리액트 내장 기능, Redux는 npm를 통해 다운받아야 합니다.
=> 비교적 단순한 상태 관리, props drilling 해결에는 context-API를 복잡한 상태관리는 Redux를 사용합니다.
=> 복잡한 상태관리에서 Context-API를 사용하면 성능문제가 발생하거나 코드가 복잡해질 수 있습니다.


6. Redux의 3대 원칙에 대해 설명해주세요.
=> 단일 상태 트리
(애플리케이션의 모든 상태는 하나의 중앙 저장소에 저장됩니다.)
=> 상태는 읽기 전용
(상태는 직접 변경되지 않으며, 반드시 액션을 통해 상태를 업데이트합니다)
=> 변경은 순수한 함수에 의해 이루어질 것
(부수 효과를 발생시키지 않으며, 입력 값이 같으면 항상 같은 결과를 반환합니다.)
