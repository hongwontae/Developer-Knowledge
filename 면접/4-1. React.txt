1. React의 원리, 특징, 장단점에 무엇인가요
=> 컴포넌트 기반의 UI 라이브러리로, 가상 DOM을 사용해 UI 업데이트 성능을 최적화합니다.
=> 선언형 프로그래밍, 단방향 데이터 흐름, 빠른 렌더링 속도, 유지보수의 용이성이 특징입니다.
=> 단점으로는 초기 학습 비용이 높고 복잡한 어플리케이션의 경우 상태관리가 복잡할 수 있습니다.


2. Virtual DOM이란 무엇인가요?
=> 실제 DOM 변경을 최소화하기 위해 메모리에 가상의 DOM을 저장하는 것을 말합니다.
=> 변경사항이 존재할 떄 Virtual DOM과 실제 DOM을 비교해서 변경된 사항만 업데이트합니다.


3. JSX란?
=> JS 코드 안에서 HTML을 사용할 수 있는 문법입니다.
=> XML과 유사한 문법, UI를 선언적으로 작성할 수 있습니다.


4. 클래스형 컴포넌트와 함수형 컴포넌트의 차이는 무엇인가요?
=> 클래스 컴포넌트는 class 키워드를 사용하고 this 키워드를 통해 상태와 라이프사이클을 메서드를 사용합니다.
=> 함수형 컴포넌트는 함수를 정의하여 사용하고 React Hooks을 통해 상태와 생명주기를 처리합니다.


5. 함수형 컴포넌트의 장점
=> 함수형 컴포넌트는 더욱 코드가 간결하고 this 키워드를 사용하지 않으며 React Hooks을 통해 상태와
생명주기를 컨트롤합니다.


6. 엘리먼트와 컴포넌트의 차이
=> 엘리먼트는 React에서 화면에 표시할 UI의 가장 작은 단위입니다.
=> 컴포넌트는 이러한 엘리먼트들이 모인 독립적인 UI입니다.


7. Pure Component란 무엇인가요
=> 불필요한 리렌더링을 방지하는 컴포넌트입니다.
=> 상태나 props가 변경되지 않으면 렌더링을 수행하지 않습니다.
=> React.memo를 통해 구현할 수 있습니다.


8. State란 무엇인가요
=> 컴포넌트에서 데이터의 동적인 변화를 관리하는 객체입니다.
=> 상태가 변경되면 자동으로 UI가 리렌더링되고 useState를 통해 상태를 관리할 수 있습니다.


9. HTML과 React 이벤트 처리 차이에 대해 설명하세요
=> React 이벤트는 SythenticEvent라는 래퍼 객체를 사용하고 함수포인터를 전달해야 합니다.
=> SythenticEvent은 브라우저 이벤트를 직접 사용하는 것이 아니라 모든 이벤트를 일관된 방식으로 관리할 수 있도록
React에서 제공하는 객체입니다.

(React에서 이벤트 객체를 재사용해 성능을 최적화하는데 이를 이벤트 풀링이라고 합니다.)
(이벤트 핸들러 호출 => SythenticEvent event 사용 => 핸들러 종료 => 초기화 => loop)

10. ref은 무엇인가요?
=> React에서 DOM 요소에 접근하거나 컴포넌트의 특정 값에 접근하기 위해 사용됩니다.
=> useRef을 통해 상태를 변경하지 않아도 값의 변화를 추적할 수 있습니다.
(리렌더링되도 ref의 값은 변하지 않습니다.)
