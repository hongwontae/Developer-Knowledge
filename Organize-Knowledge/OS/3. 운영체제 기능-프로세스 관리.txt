1. 프로세스 관리
=> 컴퓨터에서 실행중인 프로세스들을 효율적으로 관리하고 조정하는 역할입니다.
=> 해당 기능은 멀티태스킹을 가능하게 해주고 시스템 자원을 효율적으로 분배하는데 중요한 역할을 합니다.

** 프로그램 vs 프로세스 **
=> 프로그램은 파일로 저장된 정적인 코드(명령어 묶음)입니다.
=> 실행되지 않은 상태에서는 단순한 디스크에 저장된 데이터입니다.
=> chrome.exe는 하드디스크에 있는 프로그램입니다.

=> 프로세스는 실행중인 프로그램입니다.
=> 프로그램이 실행되면 운영체제가 해당 프로그램을 RAM에 로드하고, CPU에서 실행할 수 있도록 환경을
 만들어 주는 것을 프로세스라고 합니다.
=> 독립적인 실행 공간 + 시스템 자원 할당(CPU, Memory)를 통해 프로세스가 동작합니다.


2. 프로세스의 중요 역할

2-1. 프로세스 생성과 종료
=> 운영체제는 새로운 프로세스가 실행될 때, 프로세스를 생성하고 필요한 자원을 할당합니다.
=> 예를 들어, 웹 브라우저가 실행되면 CPU 시간, 메모리를 할당하여 프로세스를 만듭니다.
=> 프로세스가 종료되면 할당된 자원을 회수하여 프로세스를 종료시키고, 자원 누수를 방지합니다.

2-2. 프로세스 스케줄링
**CPU 시간** => CPU가 특정 프로세스를 실행하는데 사용하는 시간을 의미합니다.

=> CPU는 여러 프로세스를 동시에 실행할 수 없습니다.
=> 한 순간에 하나의 명령어만 실행이 가능합니다.
=> 여러 프로그램을 동시에 사용하는 것처럼 보이는 이유는 
 운영체제가 CPU 시간을 프로세스에 빠르게 번갈아 할당하기 떄문입니다.

=> 즉, 실행되는 프로세스들은 CPU가 왔다갔다 하면서 실행되고 있는 것입니다.

2-3. 프로세스 간 통신
=> 여러 프로세스 간 데이터를 주고 받아야 할 떄가 있습니다.
=> 이 떄 프로세스 간 통신(IPC)를 통해 데이터를 공유하거나 상호작용합니다.
(프로세스 자체가 다른 프로세스 메모리에 접근하는 것은 불가능합니다.)
(IPC 방식은 파이프, 메시지 큐, 공유 메모리 등이 존재합니다.)

2-4. 프로세스 동기화
=> 프로세스가 동시에 실행되는 환경에서는 동기화가 필요할 때가 있습니다.
=> 예를 들어, 여러 프로세스가 동일한 자원에 동시에 접근하려고 할 떄,
 이를 동기화하여 충돌이나 오류를 방지합니다.
(데이터 일관성을 유지한다 => 동기화 한다.)
=> 동기화 방식으로 세미포어, 뮤텍스 등이 사용됩니다.

2-5. 프로세스 상태 관리
=> 프로세스는 여러 상태를 가질 수 있습니다. 실행 중, 대기 중, 대기 큐..
=> 운영체제는 각 프로세스 상태를 추적하고 관리하여, 상태에 따라 적절하게 CPU 자원을 할당합니다.

2-6. 자원 할당과 회수
=> 프로세스는 CPU, 메모리, I/O 장치 등 다양한 자원을 사용합니다.
=> 운영체제는 자원을 할당하고 필요없을 떄 회수합니다.

2-7. 프로세스 우선순위 관리
=> 운영체제는 프로세스 우선순위를 설정하고, 중요한 프로세스가 CPU 자원을 
 우선적으로 할당받도록 합니다.

3. 운영체제의 프로세스 관리 떄문에 멀티태스킹, 시스템 자원의 효율적 분배를 할 수 있습니다.


