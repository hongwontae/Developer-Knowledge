1. 생명주기
=> 컴포넌트가 생성되고, 업데이트되고, 제거되는 과정에서 특정 메서드나 함수가 호출되는 일련의 단계를 의미합니다.


2. 생명주기 단계
=> 생명주기는 크게 3가지로 나뉩니다.
=> 마운트 : 컴포넌트가 DOM에 삽입되는 단계
=> 업데이트 : 상태가 변경되어 컴포넌트가 리렌더링되는 단계
=> 언마운트 : 컴포넌트가 DOM에서 제거되는 단계


3. 클래스형 컴포넌트 생명주기 메서드

3-1. 마운트
1. constructor를 호출하여 상태 초기화, 이벤트 핸들러 바인딩 작업을 합니다.
2. render를 호출합니다.
3. 컴포넌트가 렌더링된 이후 componentDidMount 호출됩니다. API 호출이나 구독 작업을 수행합니다.


3-2. 업데이트
1. shouldComponentUpdate()를 호출해서 상태 or props가 변경될 떄 컴포넌트가 다시 렌더링될지 여부를 결정합니다
2. shouldComponentUpdate가 true를 반환하면 render()를 호출합니다.
3. 업데이트 된 이후에 componentDidUpdate()로 상태나 props가 변경된 추가 작업을 실행합니다.


3-3. 언마운트
componentWillUnmout()가 컴포넌트가 DOM에서 제거되기 직전에 호출됩니다.
=> useEffect의 클린 업 함수로 구현할 수 있습니다.

면접질문-1
컴포넌트 라이프사이클에 대해서 설명해주세요
=> 컴포넌트가 생성되고, 업데이트되고, 제거되는 과정에서 특정 메서드나 함수가 호출되는 일련의 단계를 의미합니다.
=> 라이프 사이클은 크게 마운트, 업데이트, 언마운트 3가지로 나뉘고 이를 구현할 떄 
클래스 컴포넌트는 생명주기 메서드를, 함수형은 useEffect를 사용합니다.


면접질문-2
생명주기 메서드에 대해서 설명해주세요
=> 마운트시에는 constructor가 호출되어서 상태를 정의하고 이벤트 핸들러를 바인딩 하는 등 작업을 하고
redner 메서드를 호출해서 화면에 렌더링하고 componentDidMount를 통해 API 호출하는 마운트 이후 작업을 합니다.

=> 업데이트 시에는 shouldComponentUpdate()가 호출되어서 리렌더링 여부를 결정하고 ture가 반환되면 render() 메서드
를 호출하고 리렌더링을 시작합니다. 이후 componentDidUpdate가 호출되어서 업데이트 사후 작업을 합니다.

=> 언마운트 시에는 componentWillUnmout()가 호출되어서 컴포넌트가 dom에서 사라지기 직전 작업을 수행합니다.
=> 구독 해제나 타이머 정리하는 작업을 합니다.


면접질문-3
함수형 컴포넌트에서도 생명주기 메서드를 비슷하게 사용하는 방법
=> 함수형 컴포넌트에서 useEffect 훅을 사용하면 생명주기 메서드를 비슷하게 구현할 수 있습니다.
=> useEffect는 인자로 첫 번쨰 함수, 두 번쨰는 의존성 배열을 갖습니다.
=> 처음 마운트 시에는 useEffect 함수가 실행됩니다.
=> 업데이트 시에는 의존성 배열의 값의 변경에 따라 함수가 실행됩니다.
=> 언마운트 시에는 useEffect 함수의 return 되는 클린 업 함수가 실행됩니다.
=> 이를 통해 함수형 컴포넌트에서도 생명주기 메서드를 구현할 수 있습니다.
