1. 제네레이터
=> 이터레이터를 생성하는 특별한 함수입니다.
=> 순차적으로 값을 생성하고 중단과 재개가 가능한 객체를 생성할 수 있습니다.


2. 제네레이터 특징

2-1. 제네레이터 함수
=> function* 문법을 사용합니다.
=> 해당 함수는 호출할 떄 이터레이터 객체를 반환합니다.
=> yield 키워드를 사용해서 값을 생성하고 호출 시 그 값을 하나씩 반환합니다.


2-2. yield 키워드
=> 제네레이터는 yeild를 만나면 실행을 일시 중지하고 next()를 통해 재개할 수 있습니다.


2-3. next() 메서드
=> 제너레이터 객체는 next() 메서드 소유
=> next() 호출할 떄마다 제네레이터 함수 실행되고 yeild에서 중단된 시점부터 재개
=> next는 {value, done} 반환


면접 질문
제네레이터에 대해 설명하세요
=> function* 문법을 사용합니다. 해당 함수는 반환할 떄 이터레이터 객체를 반환하고 내부에 yeild 키워드를 사용할 수 있습니다.
=> 이터레이터 객체에서 next()를 호출하면 제네레이터 함수에서 yeild 키워드를 만날 떄까지 실행하고 일시 중단합니다.
=> 이후 next()가 또 호출되면 끊긴 시점에서 다시 제네레이터 함수가 실행됩니다.
=> 

