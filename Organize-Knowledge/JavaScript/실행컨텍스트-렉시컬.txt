1. 실행컨텍스트
=> JS 코드가 실행되는 환경을 의미합니다.
=> 코드가 실행되기 위한 정보, 실행환경을 관리하는 개념입니다.


2. 실행 컨텍스트 구조
2-1. 변수 환경
=> 변수 선언과 초기화 정보를 포함합니다.
=> 함수가 호출될 떄마다 함수의 지역 변수, 매개변수, 변수 선언이 포함됩니다.

2-2. 렉시컬 환경
=> 변수와 함수에 대한 참조를 관리하고, 스코프 체인을 설정하는 역할을 합니다.

2-3. this 바인딩
=> 현재 코드 실행을 위한 this 값을 결정합니다.


3. 실행 컨텍스트 생성과정
3-1. 프로그램이 실행되면 전역 실행 컨텍스트가 생성됩니다.
=> 전역 객체가 존재합니다. 브라우저는 window, Node.js는 global 객체가 전역 객체로 사용됩니다.
=> 전역 변수와 선언된 함수가 존재합니다. 전역 변수의 값 + 함수 이름 + 함수의 본문이 저장되는 것입니다.
=> 렉시컬 환경이 존재합니다. 전역에서 생성된 변수, 함수의 실제 데이터를 환경 레코드에 저장합니다. 외부 렉시컬 환경
참조는 null을 참조합니다.

3-4. 함수가 호출되면 새로운 함수 실행 컨텍스트가 생성됩니다.
3-5. 함수의 매개변수와 지역 변수, 그리고 렉시컬 환경을 설정합니다.
3-6. 함수 실행이 끝나면 해당 함수의 실행 컨텍스트는 스택에서 제거됩니다.


5. 실행 컨텍스트 스택(=== 콜스택)
5-1. 실행 컨텍스트 스택(Call Stack)은 실행 중인 컨텍스트의 목록을 관리합니다.


6. 렉시컬 환경

6-1. 구성 요소
1. 환경 레코드(Environment Record)
=> 변수와 함수에 대한 정보를 포함합니다.
=> 현재 렉시컬 환경 내에서 선언된 변수와 함수의 값을 저장합니다.

2. 외부 렉시컬 환경에 대한 참조(Outer Lexical Environment Reference)
=> 스코프 체인을 통해 상위 스코프에 대한 참조를 유지합니다.
=> 현재 렉시컬 환경이 어떤 상위 스코프에 연결되어 있는지를 나타냅니다.


6-2. 렉시컬 환경의 동작

1. 렉시컬 환경의 생성
=> 자바스크립트 코드가 실행될 때, 새로운 실행 컨텍스트가 생성되며 그에 따른 렉시컬 환경도 생성됩니다.
=> 렉시컬 환경은 함수 호출 시마다 생성되며, 함수가 실행되는 동안 이 환경이 변수와 함수에 대한 참조를 관리합니다.

2. 렉시컬 환경과 스코프 체인
=> 렉시컬 환경은 스코프 체인을 통해 상위 스코프(부모 스코프)와 연결됩니다.
=> 함수가 실행될 때, 해당 함수의 렉시컬 환경은 상위 스코프(상위 함수의 렉시컬 환경)와 연결됩니다. 
이를 통해 함수는 자신과 상위 스코프에 있는 변수와 함수에 접근할 수 있습니다.


면접질문-1
실행컨텍스트에 대해서 설명하세요
=> 실행컨텍스트는 JS 코드가 실행될 떄 생성되는 환경입니다.
=> 컨텍스트는 코드가 실행되는 동안 변수, 함수, 객체에 대한 정보를 관리합니다.
=> 전역 실행 컨텍스트는 전체 프로그램에 하나만 존재하고, 함수가 호출될 때마다 새로운 함수 실행 컨텍스트가 생성됩니다.
=> 실행 컨텍스트는 변수 환경, 렉시컬 환경, this 바인딩을 구성요소로 갖습니다.


면접질문-2
렉시컬 환경에 대해서 설명하세요
=> 렉시컬 환경은 JS에서 변수를 식별하고 관리하는 구조입니다.
=> 각 실행 컨텍스트는 렉시컬 환경을 가지고 있고, 해당되는 변수, 함수에 대한 정보가 저장됩니다.
=> 외부 렉시컬 환경을 참조할 수 있기 때문에 상위 스코프에 접근할 수 있고 이는 스코프 체인을 의미합니다.


면접 질문-3
렉시컬 환경과 변수 환경의 차이점을 설명하세요
=> 렉시컬 환경은 변수와 함수 모두를 관리하며 스코프 체인을 형성합니다.
=> 변수 환경은 변수 정보만 관리합니다.