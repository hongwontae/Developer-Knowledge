1. css 애니메이션
=> @keyframes 규칙과 animation 속성을 사용하여 애니메이션을 정의합니다. 
=> 스타일 시트에서 애니메이션을 정의하고, 이를 HTML 요소에 적용합니다.

1-1. 장점
=> 성능 : 브라우저의 레이아웃과 페인팅 프로세스와 최적화되어, GPU 가속을 사용할 수 있어 성능이 뛰어납니다.
=> 단순성 : CSS 파일에서 스타일과 애니메이션을 함께 정의할 수 있어 코드가 간결하고 유지보수가 용이합니다.
=> 비동기성: CSS 애니메이션은 주 스레드와 별개로 실행되므로, 사용자 인터페이스의 응답성을 유지할 수 있습니다.

1-2. 단점
=> 제한된 제어: 애니메이션의 동작을 제어하거나 복잡한 인터랙션을 구현하는 데는 한계가 있습니다.
=> 상호작용: 사용자의 입력에 따라 애니메이션을 동적으로 제어하는 것은 제한적입니다. 


2. JS 애니메이션
=> JS 타이머 함수(setInteval, requestAnimationFrame)를 사용해서 애니메이션을 구현합니다.

2-1. 장점
세밀한 제어: 애니메이션의 속도, 동작, 상태를 프로그램적으로 제어할 수 있어 복잡한 애니메이션과 상호작용을 구현할 수 있습니다.
상호작용: 사용자의 입력이나 이벤트에 따라 애니메이션을 동적으로 조정할 수 있습니다.
복잡한 로직: 조건부 애니메이션, 연속적인 애니메이션 등 복잡한 로직을 쉽게 구현할 수 있습니다.

2-2. 단점
성능 문제: JavaScript 애니메이션은 주 스레드에서 실행되기 때문에, 복잡한 애니메이션은 성능 저하를 초래할 수 있습니다.
코드 복잡성: 애니메이션 로직을 JavaScript로 직접 작성해야 하므로 코드가 복잡해질 수 있으며, 
CSS 애니메이션보다 유지보수가 어려울 수 있습니다.


면접 질문
css 애니메이션과 js 애니메이션의 차이점
=> css 애니메이션은 @keyframe, animation 속성을 사용해서 애니메이션을 적용합니다.
=> js 애니메이션은 타이머 함수(setInterval, requestAnimationFrame)을 사용해서 애니메이션을 적용합니다.
=> css 애니메이션은 간단하고 성능이 좋으나 세밀한 제어나 상호적용이 제한적입니다.
=> js 애니메이션은 더 세밀한 제어, 복잡한 애니메이션을 구현할 수 있으나 성능에 영향을 주고 코드가 복잡해 집니다.
=> 떄문에 js 애니메이션을 구현할 떄는 라이브러리로 구현합니다.
