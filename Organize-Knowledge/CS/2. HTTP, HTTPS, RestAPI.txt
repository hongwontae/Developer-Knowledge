1. 공통점
=> HTTP, HTTPS 모두 웹에서 데이터를 전송하는 프로토콜입니다.


2. HTTP
=> HTTP는 데이터를 암호화하지 않고 평문으로 전송합니다.
=> 데이터를 가로채는 보안 문제가 발생할 수 있습니다.
=> 기본적으로 80 포트를 사용합니다.
=> HTTP는 인증서가 필요없고 인증을 하지 않습니다.


3. HTTPS
=> HTTPS는 SSL/TLS 프로토콜을 사용하여 데이터 전송을 암호화합니다.
=> 기본적으로 443 포토를 사용합니다.
=> HTTPS는 SSL/TLS 인증서가 필요하고, 이를 통해 서버의 신뢰성 확인하고, 중간자 공격을 방지할 수 있습니다.


4. SEO 신뢰성
=> HTTPS는 구글 엔진에서 SEO에 유리하게 작용하며, 보안 연결이라고 표시됩니다.


5. SSL, TLS
=> SSL은 TLS로 대체되었습니다.
=> 암호화 : TLS는 더 SSL 보다 더 강력한 암호화 알고리즘을 사용합니다.
=> 인증 : 클라이언트 인증을 선택적으로 지원합니다. 양방향 인증을 구현할 수 있습니다.
=> 무결성 : 해시 함수와 메시지 인증 코드를 사용하여 데이터가 중간에서 변형되지 않았음을 검증합니다.

=> 연결과정
=> 서버 인증 : 서버는 클라이언트에게 공개 키, 인증서를 전송하여 신뢰할 수 있는 서버임을 증명합니다.
=> 비밀 키 교환 : C, S는 세션 키를 안전하게 교환하여 데이터를 암호화할 준비를 합니다.
=> 암호화 : 데이터 전송은 세션 키로 암호화되어 안전하게 전송됩니다.


6. http header
=> key-value 형식으로 구성되었고 요청이나 응답에 대한 메타데이터를 포함하고 있습니다.
=> 메타데이터, 컨텐츠 관리, 인증 및 보안

요청 헤더
=> host(요청하려는 서버의 주소),
 user-agent(요청을 보낸 클라이언트 브라우저 정보), accept(클라이언트가 처리할 수 있는 미디어 타입)

응답 헤더
=> Content-Type(응답 본문 데이터 타입), Content-Length( 응답 본문의 길이 (바이트 단위))
 Server(서버의 종류)


7. http Body
=> 실제 데이터가 담겨 있는 부분입니다.
=> 사용자에게 보여지는 컨텐츠가 들어갑니다.
=> Content-Type : 본문 데이터의 타입을 정의합니다.


8. RestAPI
=> HTTP를 기반으로 클라이언트와 서버 간의 통신을 위한 아키텍처 스타일입니다
=> 클라이언트와 서버간의 데이터를 주고받을지에 대한 설계 방식입니다.

=> 주요 원칙
1. 자원 기반
=> REST에서 자원이 중심입니다. 자원은 URL로 식별됩니다.

2. HTTP 메서드
=> HTTP 메서드를 통해 CRUD를 수행합니다.
=> GET, POST, PUT, PATCH, DELETE

3. 상태 없음
=> 각 요청은 독립적, 서버는 이전 요청 상태를 기억하지 않습니다.
=> 무상태성으로 서버의 부하가 적습니다.

4. 자원에 대한 표현
=> 클라이언트에게 JSON, XML, HTML 등 다양한 형태로 표현될 수 있습니다.

=> 장점
=> 단순함, 확장성, 유연성, 캐시 가능

