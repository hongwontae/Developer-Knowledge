1. 문제 해석
=> arr 정수 배열, flag boolean 배열이 존재합니다.
=> flag를 순차적으로 순회하면서 요소가 true일 떄 arr[i]를 arr[i]*2를 뒤에서 추가합니다.
=> 요소가 false일 떄 arr[i]개의 원소를 뒤에서 제거합니다.


2. 나의 풀이
=> flag.forEach(ele =>....)를 통해 boolean을 순차적으로 돌립니다.
=> 그리고 flag의 idx가 true인지 false 인지를 따라 분기를 나눕니다.
=> 만약 true라면 내부에서 for을 돌려서 arr[i]*2 만큼 돌려 arr[i]를 추가합니다. i가 0이라 = x
=> 만약 false라면 내부에서 for을 돌려서 arr[i] 만큼 돌려 pop를 통해 삭제합니다.
=> 그리고 return 합니다.


3. 다른 사람 풀이
=> 배열 slice의 음수 로직 + reduce를 통해 해결한 방법이 있습니다.
=> slice 음수 로직 [10, 20, 30, 40, 50]
=> start가 음수라면(-2) 거기서 부터 시작입니다. slice(-2) -> [40, 50]
=> slice(-3, -1)이라면 [30, 40] -1은 미포함이기 떄문입니다.
=> 음수는 길이처럼 동작하고 뒤에서 부터 시작하여 앞으로 나간다고 생각하면 됩니다.

=> reduce에 대한 생각을 전환할 필요가 있습니다.
=> reduce(acc, cur, idx, arr)
=> 누적합 계산이 아닌, 누적된 값을 이용한 논리계산이라고 생각을 전환해야 합니다.

=> reduce()를 사용해서 flag[i]가 true, false인지 확인하여 분기를 나눕니다.
=> 만약 true라면 [...acc, new Array(num*2).fill(num)]를 통해 true 로직을 완성시킵니다.
=> 만약 false라면 prev.slice(0, -num)을 통해 뒤를 잘라버립니다.
(-로직이기에 길이취급하여 논리식이 일치합니다.)